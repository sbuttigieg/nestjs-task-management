import { EntityRepository, Repository } from 'typeorm';
import { User } from './user.entity';
import { AuthCredentialsDto } from './dto/auth-credentials.dto';
import { ConflictException } from '@nestjs/common';
import { InternalServerErrorException } from '@nestjs/common';
import * as bcrypt from 'bcrypt';

@EntityRepository(User)
export class UserRepository extends Repository<User> {
  async signUp(authCredentialsDto: AuthCredentialsDto): Promise<void> {
    // SCOPE: creates a new user
    // ERROR HANDLING 1: no validation on inputs as the data was checked with 2 validation pipes in the controller
    // ERROR HANDLING 2: if the save method fails due to non-unique username a Conflict error is thrown
    // ERROR HANDLING 3: Otherwise an internal server error is thrown
    // DETAILS 1: retrieves username and password from the input DTO and creates a new User
    // DETAILS 2: the id is automatically generated
    // DETAILS 3: a new random salt is generated and stored for every new user
    // DETAILS 4: the password is generated by hashing the password wih the salt
    // DETAILS 5: the save method stores the data in the db
    // RETURNS: nothing, hence returns a void promise
    const { username, password } = authCredentialsDto;
    const user = new User();
    user.username = username;
    user.salt = await bcrypt.genSalt();
    user.password = await this.hashPassword(password, user.salt);
    try {
      await user.save();
    } catch (error) {
      if (error.code === '23505') {
        throw new ConflictException('Username already exists');
      } else {
        throw new InternalServerErrorException();
      }
    }
  }

  // SCOPE: validate password
  // ERROR HANDLING: performed in the service when/if a null is returned
  // DETAILS 1: retrieves username and password from the input DTO
  // DETAILS 2: find user that matches the username with findOne method
  // DETAILS 3: if user exists and password matches return the username
  // DETAILS 4: otherwise return null
  // RETURNS: a promise of a string - username or null
  async validateUserPassword(
    authCredentialsDto: AuthCredentialsDto,
  ): Promise<string> {
    const { username, password } = authCredentialsDto;
    const user = await this.findOne({ username });
    if (user && (await user.validatePassword(password))) {
      return user.username;
    } else {
      return null;
    }
  }

  // SCOPE: hash password
  // ERROR HANDLING: none
  // DETAILS: hashes the password with the salt
  // RETURNS: a promise of a string - the hashed password
  private async hashPassword(password: string, salt: string): Promise<string> {
    return bcrypt.hash(password, salt);
  }
}
